from .regexps import BOL as BOL, EOF as EOF, EOL as EOL
from _typeshed import Incomplete
from plex3 import Lexicon as Lexicon
from typing import Union
from io import StringIO, TextIOWrapper
NOT_FOUND: Incomplete

class Scanner:
    trace: int
    buffer: str
    buf_start_pos: int
    next_pos: int
    cur_pos: int
    cur_line: int
    start_pos: int
    current_scanner_position_tuple: tuple[str, int, int]
    last_token_position_tuple: tuple[str, int, int]
    text: str
    state_name: str
    lexicon: Lexicon
    stream: Union[TextIOWrapper, StringIO]
    name: Incomplete
    queue: Incomplete
    initial_state: Incomplete
    cur_line_start: int
    cur_char: Incomplete
    input_state: int
    def __init__(self, lexicon:Lexicon, stream: Union[TextIOWrapper, StringIO], name: str = '', initial_pos: Incomplete | None = None) -> None: ...
    def read(self) -> tuple[str, str]: ...
    def unread(self, token:str, value:str, position:tuple[str, int, int]) -> None: ...
    def get_current_scan_pos(self): ...
    def scan_a_token(self): ...
    def run_machine_inlined(self): ...
    def next_char(self) -> None: ...
    def position(self) -> tuple[str, int, int]: ...
    def get_position(self) -> tuple[str, int, int]: ...
    def begin(self, state_name:str) -> None: ...
    def produce(self, value:str, text: str) -> None: ...
    def eof(self) -> None: ...
    @property
    def start_line(self): ...
